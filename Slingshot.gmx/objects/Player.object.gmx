<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Main_Ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = -45;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var gravitational_strength;
var gravitational_direction;
var relative_distance_from_source;
var relative_cutoff_distance =6000;
var flipped = false;

view_xview = x-560;
view_yview = y-960;

if (speed &gt; 25){
    speed = speed - .2;
}

if (speed &lt; 25){
    speed = speed + .2;
}

var maximum_pull = 4;

//adjust this for the strength
var gravity_constant = .6;

//this keeps the gravity reasonable and also prevents division by zero errors
//relative_distance_from_source = max(point_distance(Player.x, Player.y, instance_nearest(x, y, Asteroid1).x, instance_nearest(x, y, Asteroid1).y) / 1000, 1 / sqrt(maximum_pull));
//gravitational_strength = 1 / sqr(relative_distance_from_source) * gravity_constant;

// Gravity from multiple bodies at once
with (Asteroid1){
    relative_distance_from_source = max(point_distance(Player.x, Player.y, x, y) / 1000, 1 / sqrt(maximum_pull));    
    gravitational_strength = 1 / sqr(relative_distance_from_source) * gravity_constant;
    gravitational_direction = point_direction(Player.x, Player.y, x, y);
    
    if (relative_distance_from_source &lt; relative_cutoff_distance){
        with(Player)
        {          
            motion_add(gravitational_direction, gravitational_strength);
        }
    }
    else {
        gravitational_strength = sqr(relative_distance_from_source) / 1 * gravity_constant;   
        motion_add(gravitational_direction, gravitational_strength);
    }
}

gravitational_direction = point_direction(Player.x, Player.y, instance_nearest(x, y, Asteroid1).x, instance_nearest(x, y, Asteroid1).y);

with(Player)
{
    if (abs(image_angle-gravitational_direction) &gt; 100){
        if (flipped){
            flipped = false;
        }
        else {
            image_angle = gravitational_direction+180;
        }
    }
    else {
        image_angle = gravitational_direction;
    }

    //motion_add(gravitational_direction, 1);
    
    //Add gravity when too far from anything
    /*relative_distance_from_source = max(point_distance(Player.x, Player.y, x, y) / 1000, 1 / sqrt(maximum_pull));    
    if (relative_distance_from_source &gt; relative_cutoff_distance) {
        motion_add(gravitational_direction, 10000);
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Earth_Obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gravity = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravitational_direction = point_direction(x, y, instance_nearest(x, y, Asteroid1).x, instance_nearest(x, y, Asteroid1).y);
//image_angle = point_direction(xprevious, yprevious, x, y);
//motion_add((gravitational_direction+90), 5);

var rotate;
if (abs(image_angle-gravitational_direction) &gt; 90){
    rotate = 270;
}
else{
    rotate = 90;
}

if (speed &lt; 35){
    motion_add((gravitational_direction+rotate), 5);
}

else if (speed &lt; 40){
    motion_add((gravitational_direction+rotate), 1);
}

else{
    speed = 45;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-12,-20</point>
    <point>112,-20</point>
    <point>112,204</point>
  </PhysicsShapePoints>
</object>
